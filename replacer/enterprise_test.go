package replacer

import (
	"net"
	"testing"

	"github.com/caddyserver/caddy/v2"
	"github.com/oschwald/geoip2-golang"
)

func TestEnterpriseLookup(t *testing.T) {
	reader, err := New("test-data/test-data/GeoIP2-Enterprise-Test.mmdb")
	if err != nil {
		t.Fatalf("initializing db reader: %+v", err)
	}

	t.Cleanup(func() {
		err := reader.Close()
		if err != nil {
			t.Fatalf("closing db reader: %+v", err)
		}
	})

	repl := caddy.NewEmptyReplacer()
	SetEnterprise(repl, geoip2.Enterprise{})
	reader.Lookup(repl, net.ParseIP("81.2.69.160"))
	equal(t, repl, "geoip2.country_code", "GB")
	equal(t, repl, "geoip2.country_confidence", uint8(99))
	equal(t, repl, "geoip2.country_eu", false)
	equal(t, repl, "geoip2.country_geoname_id", uint(2635167))
	equal(t, repl, "geoip2.country_name", "United Kingdom")
	equal(t, repl, "geoip2.country_names_de", "Vereinigtes Königreich")
	equal(t, repl, "geoip2.country_names_en", "United Kingdom")
	equal(t, repl, "geoip2.country_names_es", "Reino Unido")
	equal(t, repl, "geoip2.country_names_fr", "Royaume-Uni")
	equal(t, repl, "geoip2.country_names_ja", "イギリス")
	equal(t, repl, "geoip2.country_names_pt-BR", "Reino Unido")
	equal(t, repl, "geoip2.country_names_ru", "Великобритания")
	equal(t, repl, "geoip2.country_names_zh-CN", "英国")

	equal(t, repl, "geoip2.continent_code", "EU")
	equal(t, repl, "geoip2.continent_geoname_id", uint(6255148))
	equal(t, repl, "geoip2.continent_name", "Europe")
	equal(t, repl, "geoip2.continent_names_de", "Europa")
	equal(t, repl, "geoip2.continent_names_en", "Europe")
	equal(t, repl, "geoip2.continent_names_es", "Europa")
	equal(t, repl, "geoip2.continent_names_fr", "Europe")
	equal(t, repl, "geoip2.continent_names_ja", "ヨーロッパ")
	equal(t, repl, "geoip2.continent_names_pt-BR", "Europa")
	equal(t, repl, "geoip2.continent_names_ru", "Европа")
	equal(t, repl, "geoip2.continent_names_zh-CN", "欧洲")

	equal(t, repl, "geoip2.city_confidence", uint8(42))
	equal(t, repl, "geoip2.city_geoname_id", uint(2643743))
	equal(t, repl, "geoip2.city_name", "London")
	equal(t, repl, "geoip2.city_names_de", "London")
	equal(t, repl, "geoip2.city_names_en", "London")
	equal(t, repl, "geoip2.city_names_es", "Londres")
	equal(t, repl, "geoip2.city_names_fr", "Londres")
	equal(t, repl, "geoip2.city_names_ja", "ロンドン")
	equal(t, repl, "geoip2.city_names_pt-BR", "Londres")
	equal(t, repl, "geoip2.city_names_ru", "Лондон")
	equal(t, repl, "geoip2.city_names_zh-CN", "")

	equal(t, repl, "geoip2.location_latitude", 51.5142)
	equal(t, repl, "geoip2.location_longitude", -0.0931)
	equal(t, repl, "geoip2.location_time_zone", "Europe/London")
	equal(t, repl, "geoip2.location_accuracy_radius", uint16(100))
	equal(t, repl, "geoip2.location_metro_code", uint(0))

	equal(t, repl, "geoip2.postal_code", "")
	equal(t, repl, "geoip2.postal_confidence", uint8(0))

	equal(t, repl, "geoip2.registeredcountry_geoname_id", uint(6252001))
	equal(t, repl, "geoip2.registeredcountry_is_in_european_union", false)
	equal(t, repl, "geoip2.registeredcountry_iso_code", "US")
	equal(t, repl, "geoip2.registeredcountry_name", "United States")
	equal(t, repl, "geoip2.registeredcountry_names_de", "USA")
	equal(t, repl, "geoip2.registeredcountry_names_en", "United States")
	equal(t, repl, "geoip2.registeredcountry_names_es", "Estados Unidos")
	equal(t, repl, "geoip2.registeredcountry_names_fr", "États-Unis")
	equal(t, repl, "geoip2.registeredcountry_names_ja", "アメリカ合衆国")
	equal(t, repl, "geoip2.registeredcountry_names_pt-BR", "Estados Unidos")
	equal(t, repl, "geoip2.registeredcountry_names_ru", "США")
	equal(t, repl, "geoip2.registeredcountry_names_zh-CN", "美国")

	equal(t, repl, "geoip2.representedcountry_geoname_id", uint(0))
	equal(t, repl, "geoip2.representedcountry_is_in_european_union", false)
	equal(t, repl, "geoip2.representedcountry_iso_code", "")
	equal(t, repl, "geoip2.representedcountry_name", "")
	equal(t, repl, "geoip2.representedcountry_names_de", "")
	equal(t, repl, "geoip2.representedcountry_names_en", "")
	equal(t, repl, "geoip2.representedcountry_names_es", "")
	equal(t, repl, "geoip2.representedcountry_names_fr", "")
	equal(t, repl, "geoip2.representedcountry_names_ja", "")
	equal(t, repl, "geoip2.representedcountry_names_pt-BR", "")
	equal(t, repl, "geoip2.representedcountry_names_ru", "")
	equal(t, repl, "geoip2.representedcountry_names_zh-CN", "")
	equal(t, repl, "geoip2.representedcountry_type", "")

	equal(t, repl, "geoip2.subdivisions_1_confidence", uint8(42))
	equal(t, repl, "geoip2.subdivisions_1_geoname_id", uint(6269131))
	equal(t, repl, "geoip2.subdivisions_1_iso_code", "ENG")
	equal(t, repl, "geoip2.subdivisions_1_names_de", "")
	equal(t, repl, "geoip2.subdivisions_1_names_en", "England")
	equal(t, repl, "geoip2.subdivisions_1_names_es", "Inglaterra")
	equal(t, repl, "geoip2.subdivisions_1_names_fr", "Angleterre")
	equal(t, repl, "geoip2.subdivisions_1_names_ja", "")
	equal(t, repl, "geoip2.subdivisions_1_names_pt-BR", "Inglaterra")
	equal(t, repl, "geoip2.subdivisions_1_names_ru", "")
	equal(t, repl, "geoip2.subdivisions_1_names_zh-CN", "")
	equal(t, repl, "geoip2.subdivisions_1_name", "England")
	equal(t, repl, "geoip2.subdivisions_2_confidence", uint8(0))
	equal(t, repl, "geoip2.subdivisions_2_geoname_id", uint(0))
	equal(t, repl, "geoip2.subdivisions_2_iso_code", "")
	equal(t, repl, "geoip2.subdivisions_2_names_de", "")
	equal(t, repl, "geoip2.subdivisions_2_names_en", "")
	equal(t, repl, "geoip2.subdivisions_2_names_es", "")
	equal(t, repl, "geoip2.subdivisions_2_names_fr", "")
	equal(t, repl, "geoip2.subdivisions_2_names_ja", "")
	equal(t, repl, "geoip2.subdivisions_2_names_pt-BR", "")
	equal(t, repl, "geoip2.subdivisions_2_names_ru", "")
	equal(t, repl, "geoip2.subdivisions_2_names_zh-CN", "")
	equal(t, repl, "geoip2.subdivisions_2_name", "")

	equal(t, repl, "geoip2.traits_autonomous_system_number", uint(0))
	equal(t, repl, "geoip2.traits_autonomous_system_organization", "")
	equal(t, repl, "geoip2.traits_connection_type", "Corporate")
	equal(t, repl, "geoip2.traits_domain", "in-addr.arpa")
	equal(t, repl, "geoip2.traits_is_anonymous_proxy", false)
	equal(t, repl, "geoip2.traits_is_anycast", false)
	equal(t, repl, "geoip2.traits_is_legitimate_proxy", false)
	equal(t, repl, "geoip2.traits_is_satellite_provider", false)
	equal(t, repl, "geoip2.traits_isp", "Andrews & Arnold Ltd")
	equal(t, repl, "geoip2.traits_mobile_country_code", "")
	equal(t, repl, "geoip2.traits_mobile_network_code", "")
	equal(t, repl, "geoip2.traits_organization", "STONEHOUSE office network")
	equal(t, repl, "geoip2.traits_static_ip_score", 0.34)
	equal(t, repl, "geoip2.traits_user_type", "government")
}

func TestCityLookup(t *testing.T) {
	reader, err := New("test-data/test-data/GeoIP2-City-Test.mmdb")
	if err != nil {
		t.Fatalf("initializing db reader: %+v", err)
	}

	t.Cleanup(func() {
		err := reader.Close()
		if err != nil {
			t.Fatalf("closing db reader: %+v", err)
		}
	})

	repl := caddy.NewEmptyReplacer()
	SetEnterprise(repl, geoip2.Enterprise{})
	reader.Lookup(repl, net.ParseIP("81.2.69.160"))
	equal(t, repl, "geoip2.country_code", "GB")
	equal(t, repl, "geoip2.country_confidence", uint8(0))
	equal(t, repl, "geoip2.country_eu", false)
	equal(t, repl, "geoip2.country_geoname_id", uint(2635167))
	equal(t, repl, "geoip2.country_name", "United Kingdom")
	equal(t, repl, "geoip2.country_names_de", "Vereinigtes Königreich")
	equal(t, repl, "geoip2.country_names_en", "United Kingdom")
	equal(t, repl, "geoip2.country_names_es", "Reino Unido")
	equal(t, repl, "geoip2.country_names_fr", "Royaume-Uni")
	equal(t, repl, "geoip2.country_names_ja", "イギリス")
	equal(t, repl, "geoip2.country_names_pt-BR", "Reino Unido")
	equal(t, repl, "geoip2.country_names_ru", "Великобритания")
	equal(t, repl, "geoip2.country_names_zh-CN", "英国")

	equal(t, repl, "geoip2.continent_code", "EU")
	equal(t, repl, "geoip2.continent_geoname_id", uint(6255148))
	equal(t, repl, "geoip2.continent_name", "Europe")
	equal(t, repl, "geoip2.continent_names_de", "Europa")
	equal(t, repl, "geoip2.continent_names_en", "Europe")
	equal(t, repl, "geoip2.continent_names_es", "Europa")
	equal(t, repl, "geoip2.continent_names_fr", "Europe")
	equal(t, repl, "geoip2.continent_names_ja", "ヨーロッパ")
	equal(t, repl, "geoip2.continent_names_pt-BR", "Europa")
	equal(t, repl, "geoip2.continent_names_ru", "Европа")
	equal(t, repl, "geoip2.continent_names_zh-CN", "欧洲")

	equal(t, repl, "geoip2.city_confidence", uint8(0))
	equal(t, repl, "geoip2.city_geoname_id", uint(2643743))
	equal(t, repl, "geoip2.city_name", "London")
	equal(t, repl, "geoip2.city_names_de", "London")
	equal(t, repl, "geoip2.city_names_en", "London")
	equal(t, repl, "geoip2.city_names_es", "Londres")
	equal(t, repl, "geoip2.city_names_fr", "Londres")
	equal(t, repl, "geoip2.city_names_ja", "ロンドン")
	equal(t, repl, "geoip2.city_names_pt-BR", "Londres")
	equal(t, repl, "geoip2.city_names_ru", "Лондон")
	equal(t, repl, "geoip2.city_names_zh-CN", "")

	equal(t, repl, "geoip2.location_latitude", 51.5142)
	equal(t, repl, "geoip2.location_longitude", -0.0931)
	equal(t, repl, "geoip2.location_time_zone", "Europe/London")
	equal(t, repl, "geoip2.location_accuracy_radius", uint16(100))
	equal(t, repl, "geoip2.location_metro_code", uint(0))

	equal(t, repl, "geoip2.postal_code", "")
	equal(t, repl, "geoip2.postal_confidence", uint8(0))

	equal(t, repl, "geoip2.registeredcountry_geoname_id", uint(6252001))
	equal(t, repl, "geoip2.registeredcountry_is_in_european_union", false)
	equal(t, repl, "geoip2.registeredcountry_iso_code", "US")
	equal(t, repl, "geoip2.registeredcountry_name", "United States")
	equal(t, repl, "geoip2.registeredcountry_names_de", "USA")
	equal(t, repl, "geoip2.registeredcountry_names_en", "United States")
	equal(t, repl, "geoip2.registeredcountry_names_es", "Estados Unidos")
	equal(t, repl, "geoip2.registeredcountry_names_fr", "États-Unis")
	equal(t, repl, "geoip2.registeredcountry_names_ja", "アメリカ合衆国")
	equal(t, repl, "geoip2.registeredcountry_names_pt-BR", "Estados Unidos")
	equal(t, repl, "geoip2.registeredcountry_names_ru", "США")
	equal(t, repl, "geoip2.registeredcountry_names_zh-CN", "美国")

	equal(t, repl, "geoip2.representedcountry_geoname_id", uint(0))
	equal(t, repl, "geoip2.representedcountry_is_in_european_union", false)
	equal(t, repl, "geoip2.representedcountry_iso_code", "")
	equal(t, repl, "geoip2.representedcountry_name", "")
	equal(t, repl, "geoip2.representedcountry_names_de", "")
	equal(t, repl, "geoip2.representedcountry_names_en", "")
	equal(t, repl, "geoip2.representedcountry_names_es", "")
	equal(t, repl, "geoip2.representedcountry_names_fr", "")
	equal(t, repl, "geoip2.representedcountry_names_ja", "")
	equal(t, repl, "geoip2.representedcountry_names_pt-BR", "")
	equal(t, repl, "geoip2.representedcountry_names_ru", "")
	equal(t, repl, "geoip2.representedcountry_names_zh-CN", "")
	equal(t, repl, "geoip2.representedcountry_type", "")

	equal(t, repl, "geoip2.subdivisions_1_confidence", uint8(0))
	equal(t, repl, "geoip2.subdivisions_1_geoname_id", uint(6269131))
	equal(t, repl, "geoip2.subdivisions_1_iso_code", "ENG")
	equal(t, repl, "geoip2.subdivisions_1_names_de", "")
	equal(t, repl, "geoip2.subdivisions_1_names_en", "England")
	equal(t, repl, "geoip2.subdivisions_1_names_es", "Inglaterra")
	equal(t, repl, "geoip2.subdivisions_1_names_fr", "Angleterre")
	equal(t, repl, "geoip2.subdivisions_1_names_ja", "")
	equal(t, repl, "geoip2.subdivisions_1_names_pt-BR", "Inglaterra")
	equal(t, repl, "geoip2.subdivisions_1_names_ru", "")
	equal(t, repl, "geoip2.subdivisions_1_names_zh-CN", "")
	equal(t, repl, "geoip2.subdivisions_1_name", "England")
	equal(t, repl, "geoip2.subdivisions_2_confidence", uint8(0))
	equal(t, repl, "geoip2.subdivisions_2_geoname_id", uint(0))
	equal(t, repl, "geoip2.subdivisions_2_iso_code", "")
	equal(t, repl, "geoip2.subdivisions_2_names_de", "")
	equal(t, repl, "geoip2.subdivisions_2_names_en", "")
	equal(t, repl, "geoip2.subdivisions_2_names_es", "")
	equal(t, repl, "geoip2.subdivisions_2_names_fr", "")
	equal(t, repl, "geoip2.subdivisions_2_names_ja", "")
	equal(t, repl, "geoip2.subdivisions_2_names_pt-BR", "")
	equal(t, repl, "geoip2.subdivisions_2_names_ru", "")
	equal(t, repl, "geoip2.subdivisions_2_names_zh-CN", "")
	equal(t, repl, "geoip2.subdivisions_2_name", "")

	equal(t, repl, "geoip2.traits_autonomous_system_number", uint(0))
	equal(t, repl, "geoip2.traits_autonomous_system_organization", "")
	equal(t, repl, "geoip2.traits_connection_type", "")
	equal(t, repl, "geoip2.traits_domain", "")
	equal(t, repl, "geoip2.traits_is_anonymous_proxy", false)
	equal(t, repl, "geoip2.traits_is_anycast", false)
	equal(t, repl, "geoip2.traits_is_legitimate_proxy", false)
	equal(t, repl, "geoip2.traits_is_satellite_provider", false)
	equal(t, repl, "geoip2.traits_isp", "")
	equal(t, repl, "geoip2.traits_mobile_country_code", "")
	equal(t, repl, "geoip2.traits_mobile_network_code", "")
	equal(t, repl, "geoip2.traits_organization", "")
	equal(t, repl, "geoip2.traits_static_ip_score", float64(0))
	equal(t, repl, "geoip2.traits_user_type", "")
}

func TestCountryLookup(t *testing.T) {
	reader, err := New("test-data/test-data/GeoIP2-Country-Test.mmdb")
	if err != nil {
		t.Fatalf("initializing db reader: %+v", err)
	}

	t.Cleanup(func() {
		err := reader.Close()
		if err != nil {
			t.Fatalf("closing db reader: %+v", err)
		}
	})

	repl := caddy.NewEmptyReplacer()
	SetEnterprise(repl, geoip2.Enterprise{})
	reader.Lookup(repl, net.ParseIP("81.2.69.160"))
	equal(t, repl, "geoip2.country_code", "GB")
	equal(t, repl, "geoip2.country_confidence", uint8(0))
	equal(t, repl, "geoip2.country_eu", false)
	equal(t, repl, "geoip2.country_geoname_id", uint(2635167))
	equal(t, repl, "geoip2.country_name", "United Kingdom")
	equal(t, repl, "geoip2.country_names_de", "Vereinigtes Königreich")
	equal(t, repl, "geoip2.country_names_en", "United Kingdom")
	equal(t, repl, "geoip2.country_names_es", "Reino Unido")
	equal(t, repl, "geoip2.country_names_fr", "Royaume-Uni")
	equal(t, repl, "geoip2.country_names_ja", "イギリス")
	equal(t, repl, "geoip2.country_names_pt-BR", "Reino Unido")
	equal(t, repl, "geoip2.country_names_ru", "Великобритания")
	equal(t, repl, "geoip2.country_names_zh-CN", "英国")

	equal(t, repl, "geoip2.continent_code", "EU")
	equal(t, repl, "geoip2.continent_geoname_id", uint(6255148))
	equal(t, repl, "geoip2.continent_name", "Europe")
	equal(t, repl, "geoip2.continent_names_de", "Europa")
	equal(t, repl, "geoip2.continent_names_en", "Europe")
	equal(t, repl, "geoip2.continent_names_es", "Europa")
	equal(t, repl, "geoip2.continent_names_fr", "Europe")
	equal(t, repl, "geoip2.continent_names_ja", "ヨーロッパ")
	equal(t, repl, "geoip2.continent_names_pt-BR", "Europa")
	equal(t, repl, "geoip2.continent_names_ru", "Европа")
	equal(t, repl, "geoip2.continent_names_zh-CN", "欧洲")

	equal(t, repl, "geoip2.city_confidence", uint8(0))
	equal(t, repl, "geoip2.city_geoname_id", uint(0))
	equal(t, repl, "geoip2.city_name", "")
	equal(t, repl, "geoip2.city_names_de", "")
	equal(t, repl, "geoip2.city_names_en", "")
	equal(t, repl, "geoip2.city_names_es", "")
	equal(t, repl, "geoip2.city_names_fr", "")
	equal(t, repl, "geoip2.city_names_ja", "")
	equal(t, repl, "geoip2.city_names_pt-BR", "")
	equal(t, repl, "geoip2.city_names_ru", "")
	equal(t, repl, "geoip2.city_names_zh-CN", "")

	equal(t, repl, "geoip2.location_latitude", float64(0))
	equal(t, repl, "geoip2.location_longitude", float64(0))
	equal(t, repl, "geoip2.location_time_zone", "")
	equal(t, repl, "geoip2.location_accuracy_radius", uint16(0))
	equal(t, repl, "geoip2.location_metro_code", uint(0))

	equal(t, repl, "geoip2.postal_code", "")
	equal(t, repl, "geoip2.postal_confidence", uint8(0))

	equal(t, repl, "geoip2.registeredcountry_geoname_id", uint(6252001))
	equal(t, repl, "geoip2.registeredcountry_is_in_european_union", false)
	equal(t, repl, "geoip2.registeredcountry_iso_code", "US")
	equal(t, repl, "geoip2.registeredcountry_name", "United States")
	equal(t, repl, "geoip2.registeredcountry_names_de", "USA")
	equal(t, repl, "geoip2.registeredcountry_names_en", "United States")
	equal(t, repl, "geoip2.registeredcountry_names_es", "Estados Unidos")
	equal(t, repl, "geoip2.registeredcountry_names_fr", "États-Unis")
	equal(t, repl, "geoip2.registeredcountry_names_ja", "アメリカ合衆国")
	equal(t, repl, "geoip2.registeredcountry_names_pt-BR", "Estados Unidos")
	equal(t, repl, "geoip2.registeredcountry_names_ru", "США")
	equal(t, repl, "geoip2.registeredcountry_names_zh-CN", "美国")

	equal(t, repl, "geoip2.representedcountry_geoname_id", uint(0))
	equal(t, repl, "geoip2.representedcountry_is_in_european_union", false)
	equal(t, repl, "geoip2.representedcountry_iso_code", "")
	equal(t, repl, "geoip2.representedcountry_name", "")
	equal(t, repl, "geoip2.representedcountry_names_de", "")
	equal(t, repl, "geoip2.representedcountry_names_en", "")
	equal(t, repl, "geoip2.representedcountry_names_es", "")
	equal(t, repl, "geoip2.representedcountry_names_fr", "")
	equal(t, repl, "geoip2.representedcountry_names_ja", "")
	equal(t, repl, "geoip2.representedcountry_names_pt-BR", "")
	equal(t, repl, "geoip2.representedcountry_names_ru", "")
	equal(t, repl, "geoip2.representedcountry_names_zh-CN", "")
	equal(t, repl, "geoip2.representedcountry_type", "")

	equal(t, repl, "geoip2.subdivisions_1_confidence", uint8(0))
	equal(t, repl, "geoip2.subdivisions_1_geoname_id", uint(0))
	equal(t, repl, "geoip2.subdivisions_1_iso_code", "")
	equal(t, repl, "geoip2.subdivisions_1_names_de", "")
	equal(t, repl, "geoip2.subdivisions_1_names_en", "")
	equal(t, repl, "geoip2.subdivisions_1_names_es", "")
	equal(t, repl, "geoip2.subdivisions_1_names_fr", "")
	equal(t, repl, "geoip2.subdivisions_1_names_ja", "")
	equal(t, repl, "geoip2.subdivisions_1_names_pt-BR", "")
	equal(t, repl, "geoip2.subdivisions_1_names_ru", "")
	equal(t, repl, "geoip2.subdivisions_1_names_zh-CN", "")
	equal(t, repl, "geoip2.subdivisions_1_name", "")
	equal(t, repl, "geoip2.subdivisions_2_confidence", uint8(0))
	equal(t, repl, "geoip2.subdivisions_2_geoname_id", uint(0))
	equal(t, repl, "geoip2.subdivisions_2_iso_code", "")
	equal(t, repl, "geoip2.subdivisions_2_names_de", "")
	equal(t, repl, "geoip2.subdivisions_2_names_en", "")
	equal(t, repl, "geoip2.subdivisions_2_names_es", "")
	equal(t, repl, "geoip2.subdivisions_2_names_fr", "")
	equal(t, repl, "geoip2.subdivisions_2_names_ja", "")
	equal(t, repl, "geoip2.subdivisions_2_names_pt-BR", "")
	equal(t, repl, "geoip2.subdivisions_2_names_ru", "")
	equal(t, repl, "geoip2.subdivisions_2_names_zh-CN", "")
	equal(t, repl, "geoip2.subdivisions_2_name", "")

	equal(t, repl, "geoip2.traits_autonomous_system_number", uint(0))
	equal(t, repl, "geoip2.traits_autonomous_system_organization", "")
	equal(t, repl, "geoip2.traits_connection_type", "")
	equal(t, repl, "geoip2.traits_domain", "")
	equal(t, repl, "geoip2.traits_is_anonymous_proxy", false)
	equal(t, repl, "geoip2.traits_is_anycast", false)
	equal(t, repl, "geoip2.traits_is_legitimate_proxy", false)
	equal(t, repl, "geoip2.traits_is_satellite_provider", false)
	equal(t, repl, "geoip2.traits_isp", "")
	equal(t, repl, "geoip2.traits_mobile_country_code", "")
	equal(t, repl, "geoip2.traits_mobile_network_code", "")
	equal(t, repl, "geoip2.traits_organization", "")
	equal(t, repl, "geoip2.traits_static_ip_score", float64(0))
	equal(t, repl, "geoip2.traits_user_type", "")
}

func equal(t *testing.T, repl *caddy.Replacer, key string, expected any) {
	t.Helper()
	actual, ok := repl.Get(key)
	if !ok {
		t.Errorf("key %v not set", key)
	}
	if actual != expected {
		t.Errorf("\nkey     : %v\nexpected: %+v\nactual  : %+v", key, expected, actual)
	}
}
